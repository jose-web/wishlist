---
interface Props {
	size?: number
}

const { size } = Astro.props;

import { type APIsteamWishList } from '../types/APISteamWishList'
import Game from './Game.astro'

const urlInstantGaming = 'https://www.instant-gaming.com/es/busquedas/?igr=josedlsr&q='
const urlSteam = 'https://store.steampowered.com/app/'

const res = await fetch('https://store.steampowered.com/wishlist/profiles/76561198208035909/wishlistdata')
const data = await res.json()

const arrayGames: APIsteamWishList[] = Object.keys(data).map(gameId => {return {...data[gameId], gameId}})
.filter(game => {
    let gameShowed = !(game.priority > size!)
    let isfree = !game.is_free_game
    let priceIsNotZero = game.subs[0]?.price > 0

    return gameShowed && isfree && priceIsNotZero
})
.sort(function (a, b){ return a.priority - b.priority })

---

<div id="steam" transition:name="steam">
    <h2>Steam</h2>

    <div class={
        "grid gap-[1rem] grid-cols-1 md:grid-cols-3 "
        + (size == undefined ? "xl:grid-cols-5": "")
    }>

    {
        arrayGames.map( game =>
            <Game 
                name = {game.name} 
                discount_block = {game.subs[0].discount_block}
                img = {game.capsule}
                score = {game.review_score * 5 / 10}
                urlSteam = {urlSteam + game.gameId}
                urlInstantGaming = {urlInstantGaming + game.name}
            />
        ) 
    }
    </div>

    {
        () => {
            if (size != undefined){
                return <a href="./steam/">See all</a>
            }
        }
    }
</div>